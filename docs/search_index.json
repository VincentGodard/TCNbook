[["index.html", "A Minimal Book Example 1 Prerequisites", " A Minimal Book Example Vincent Godard 2022-10-05 1 Prerequisites This html page is derived from an R Markdown Notebook. You can copy/paste the various lines of code into your own R script and run it in any R session. These activities do not require any specific prior knowledge of R programming language. The idea is for you to simply copy and paste the code in a script, run it, and change various parameters to observe and investigate the associated response. In addition to the scripting-oriented activities below you can also experiment visually with a few interactive Shiny apps http://shinyproxy.osupytheas.fr Both are built on the dedicated TCNtools package : https://vincentgodard.github.io/TCNtools This package contain various functions to assist the interpretation of TCN concentration at the Earth Surface. You can install the package directly on you system (instructions on package website), or alternatively launch a binder session where everything is installed and should run smoothly. You can launch the binder by clicking on the icon below, and access an online RStudio session in your browser. The first thing we have to do, before calling any of these functions, is to load the TCNtools package. library(&quot;TCNtools&quot;) "],["introduction.html", "2 Introduction ", " 2 Introduction "],["objectives-of-the-session.html", "2.1 Objectives of the session", " 2.1 Objectives of the session We are going to cover two things during this session look into the calculation of scaling factors used for the computation of local production rates, and how they vary in space and time make some simple calculations of TCN concentration build up at the Earth surface, as a response to exposure and denudation test "],["scaling-factors.html", "3 Scaling factors", " 3 Scaling factors First we are going to explore how the scaling factors are changing with elevation, latitude and time, and what is the impact on local production rates. "],["time-independent-scaling.html", "3.1 Time-independent scaling", " 3.1 Time-independent scaling We are going to present the most widely used and simplest scaling scheme known as Lal-Stone and often abbreviated as st. The main equations are presented in the reference article by Stone (2000) . 3.1.1 Site characteristics We first need to define some parameters concerning the site of interest : latitude lat in degrees altitude z in meters (can be a vector or a scalar) longitude lon in degrees, this is not used for st scaling (Stone (2000)), just in case we want to compute atmospheric pressure according to ERA40 (Uppala et al. (2005)). lat = 30 # latitude lon = 30 # longitude z = seq(0,3000,by=100) # vector from 0 to 3000 m by 100 m increments Now we can compute the atmospheric pressure, with the function atm_pressure according to the two models available, and then plot for comparison. Here z is a vector to see the variations over a range of elevations. To get information about the usage of the function used here (for example what are the different models) type ?atm_pressure in the R console. P1 = atm_pressure(alt=z,model=&quot;stone2000&quot;) P2 = atm_pressure(alt=z,lat=lat,lon=lon,model=&quot;era40&quot;) plot(P1,z,type=&quot;l&quot;,xlab=&quot;Pressure (hPa)&quot;,ylab=&quot;Altitude (m)&quot;,col=&quot;darkorange3&quot;) lines(P2,z,lty=2,col=&quot;darkorange3&quot;) legend(&quot;topright&quot;,c(&quot;Stone 2000&quot;,&quot;ERA40&quot;),lty=c(1,2)) TODO Modify lat and lon to see the effects on the pressure computed with the ERA40 model 3.1.2 Computation of scaling factors We can now compute the scaling factors according to Stone (2000). Same as above, to get some information about the function (parameters definition) type ?st_scaling in the R console. st = scaling_st(P1,lat) # here we use the pressure according to Stone 2000 model print(st) ## Nneutrons Nmuons ## 1 0.8300224 0.8330000 ## 2 0.9026631 0.8751951 ## 3 0.9789258 0.9190924 ## 4 1.0593995 0.9647381 ## 5 1.1446610 1.0121787 ## 6 1.2352759 1.0614606 ## 7 1.3317993 1.1126307 ## 8 1.4347771 1.1657357 ## 9 1.5447466 1.2208226 ## 10 1.6622372 1.2779383 ## 11 1.7877718 1.3371297 ## 12 1.9218669 1.3984436 ## 13 2.0650339 1.4619266 ## 14 2.2177794 1.5276253 ## 15 2.3806062 1.5955858 ## 16 2.5540138 1.6658541 ## 17 2.7384989 1.7384759 ## 18 2.9345563 1.8134963 ## 19 3.1426788 1.8909602 ## 20 3.3633586 1.9709117 ## 21 3.5970868 2.0533946 ## 22 3.8443547 2.1384521 ## 23 4.1056535 2.2261264 ## 24 4.3814748 2.3164594 ## 25 4.6723113 2.4094921 ## 26 4.9786564 2.5052644 ## 27 5.3010052 2.6038156 ## 28 5.6398539 2.7051842 ## 29 5.9957004 2.8094072 ## 30 6.3690443 2.9165212 ## 31 6.7603872 3.0265612 The result is stored in st as a dataframe with as many rows as there are elements in the input pressure vector (P1) and two columns named Nneutrons and Nmuons, for the spallogenic and muogenic contributions, respectively. We can plot the evolution with elevation, which illustrates the major influence of altitude of the sampling site in controlling the local production rate. plot(st$Nneutrons,z,type=&quot;l&quot;, xlab=&quot;Spallogenic st scaling factor (Stone 2000)&quot;,ylab=&quot;Altitude (m)&quot;, main=paste(&quot;Latitude &quot;,lat,&quot;°&quot;,sep=&quot;&quot;),col=&quot;darkorange3&quot;) TODO Modify lat to see the effects on the scaling factor 3.1.3 Global variations In order to get a better idea of the variations with both latitude (from 0 to 90°) and elevation (from sea level to 3000 m) we can try the following plot. P = atm_pressure(alt=0,model=&quot;stone2000&quot;) # compute pressure lat = seq(0,90,by=1) # latitude vector n = length(lat) # size of vector st = scaling_st(P,lat) # compute scaling plot(lat,st$Nneutrons,type=&quot;l&quot;,ylim=c(0.5,12),col=&quot;darkorange3&quot;, xlab=&quot;Latitude (°)&quot;,ylab=&quot;Spallogenic st scaling factor (Stone 2000)&quot;) grid() text(lat[n],st$Nneutrons[n],&quot;0 km&quot;,cex=0.5,adj=0) # put label at the end of curve for (z in seq(500,3000,by=500)){ # loop on elevations : same as above for a range of elevations P = atm_pressure(alt=z,model=&quot;stone2000&quot;) st = scaling_st(P,lat) lines(lat,st$Nneutrons,col=&quot;darkorange3&quot;) text(lat[n],st$Nneutrons[n],z/1000,cex=0.5,adj=0) } This dependence of the scaling factor on latitude is a direct consequence of the dipole structure of the Earth magnetic field, with a higher cosmic rays flux at high latitudes. "],["time-dependent-scalings.html", "3.2 Time-dependent scalings", " 3.2 Time-dependent scalings 3.2.1 Definition of paleomagnetic variations Time-dependent scaling factors allow to take into account the variations through time of the Earth magnetic field, which modulates the incoming cosmic ray flux. This is particularly important in exposure dating applications. 3.2.1.1 Virtual Dipole Moment We need to first define a time series for the Virtual Dipole Moment (VDM) variation, using the get_vdm function. Several paleomagnetic database can be used. The three options correspond to databases defined in Crep. We plot the three of them on the same graph. time = seq(0,50e3,length.out = 1000) # time vector from 0 to 50 ka BP, with 1000 regularly spaced elements # plot(NA,xlim=range(time),ylim=c(0,16),xlab=&quot;Time (a BP)&quot;,ylab=&quot;VDM (10^22 A.m^2)&quot;) grid() # - Glopis col1=&quot;coral1&quot; vdm1=get_vdm(time,model=&quot;glopis&quot;) lines(time,vdm1/1e22,col=col1) # 2 - Musch col2 = &quot;chartreuse&quot; vdm2=get_vdm(time,model=&quot;musch&quot;) lines(time,vdm2/1e22,col=col2) # 3 - lsd col3 = &quot;cornflowerblue&quot; vdm3=get_vdm(time,model=&quot;lsd&quot;) lines(time,vdm3/1e22,col=col3) legend(&quot;topright&quot;,c(&quot;glopis&quot;,&quot;musch&quot;,&quot;lsd&quot;),col=c(col1,col2,col3),lty=1) 3.2.1.2 Cutoff Rigidity Now we need to convert that into cutoff rigidity using vdm2rc function. Such can be done using the following expression (Martin et al. (2017)): \\[R_c = 14.3 \\frac{M}{M_0}\\cos^4 \\lambda,\\] where \\(M\\) is the moment of the Earth dipole field, \\(M_0\\) the 2010 reference value for \\(M\\) and \\(\\lambda\\) the latitude. This corresponds to the default model=elsasser54 in the vdm2rc function arguments. A more complex formula proposed by Lifton, Sato, and Dunai (2014) can be used with model=lifton14. lat = 40 rc1a = vdm2rc(vdm1,lat) rc1b = vdm2rc(vdm1,lat,model=&quot;lifton14&quot;) rc2a = vdm2rc(vdm2,lat) rc2b = vdm2rc(vdm2,lat,model=&quot;lifton14&quot;) rc3a = vdm2rc(vdm3,lat) rc3b = vdm2rc(vdm3,lat,model=&quot;lifton14&quot;) # plot(NA,xlim=range(time),ylim=range(rc1a,rc2a,na.omit(rc3a)),xlab=&quot;Time (a BP)&quot;,ylab=&quot;Rc (GV)&quot;) grid() lines(time,rc1a,col=col1) lines(time,rc1b,col=col1,lty=2) lines(time,rc2a,col=col2) lines(time,rc2b,col=col2,lty=2) lines(time,rc3a,col=col3) lines(time,rc3b,col=col3,lty=2) legend(&quot;bottomleft&quot;,c(&quot;glopis&quot;,&quot;musch&quot;,&quot;lsd&quot;,&quot;elsasser54&quot;,&quot;lifton14&quot;),col=c(col1,col2,col3,&quot;black&quot;,&quot;black&quot;),lty=c(1,1,1,1,2),cex=0.5) TODO change the latitude lat and observe the influence on \\(R_c\\) 3.2.2 Lal/Stone modified scaling (lm) Once we have a \\(R_c\\) time series we can compute the lm scaling factors using the scaling_lm function. For that we will only use one elevation (z=0), so we recompute the atmospheric pressure. We plot the corresponding time series, as well as the value of st scaling factor for reference. P = atm_pressure(alt=0,model=&quot;stone2000&quot;) lm = scaling_lm(P,rc1a) plot(time,lm,type=&quot;l&quot;,xlab=&quot;Time (a BP)&quot;,ylab=&quot;Spallogenic lm scaling factor&quot;) abline(h=scaling_st(P,lat)$Nneutrons,lty=2) TODO Explore the variations of the scaling factor by using various values for elevation alt, and different \\(R_c\\) time-series. Look for the differences with the time-independant st scaling "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]

[["application-to-exposure-dating.html", "4 Application to exposure dating 4.1 Back to the evolution of concentration 4.2 Interpretation in terms of exposure ages 4.3 Time varying production rates 4.4 Dealing with uncertainties", " 4 Application to exposure dating 4.1 Back to the evolution of concentration We first consider the evolution of concentration with time \\(t\\). The computation will be carried out at the surface (\\(z=0\\)), but this could be done at any arbitrary depth. We also consider that \\(\\varepsilon = 0\\) and that there is no inheritance. The starting equation above becomes, \\[\\begin{equation} C(t)=\\sum_i \\frac{P_i}{\\lambda}(1-e^{-\\lambda t}) \\tag{4.1} \\end{equation}\\] For the sake of the example we are going to compute that by hand, and compare with the results obtained with the solv_conc_eul function, Again we define the usual parameters Code # set up altitude = 1000 # elevation in m latitude = 45 # latitude in degrees nuc = &quot;Be10&quot; P = atm_pressure(alt=altitude,model=&quot;stone2000&quot;) # compute atmospheric pressure at site S = scaling_st(P,latitude) # compute the scaling parameters according to Stone (2000) To improve readability we compute scaled production rates and give them explicit names. Code Pspal = prm[1,nuc]*S$Nneutrons # scaled spallation production rate in at/g/y (st scaling) Pstop = prm[2,nuc]*S$Nmuons # scaled stopped muons production rate in at/g/y Pfast = prm[3,nuc]*S$Nmuons # scaled fast muons production rate in at/g/y lambda = prm[4,nuc] # radioactive decay (1/y) And then apply equation (4.1) and compare the results with the output of function solv_conc_eul. Code t = seq(0,200e3,by=100) # a vector containing time from 0 to 100 ka by 100 a steps C = (Pspal + Pstop + Pfast) / lambda * (1-exp(-lambda*t)) plot(t/1000,C,type=&quot;l&quot;,col=&quot;coral&quot;,lwd=3,ylab=&quot;Concentration (at/g)&quot;,xlab=&quot;Time (ka)&quot;) grid() # check if this is ok C2 = solv_conc_eul(0,0,t,0,prm[,nuc],S,Lambda) # compute concentration for pure exposure lines(t/1000,C2,lty=2) Below you can get all the necessary code to produce the figure Code library(&quot;TCNtools&quot;) data(Lambda) data(prm) rho = 2.7 # # set up altitude = 1000 # elevation in m latitude = 45 # latitude in degrees nuc = &quot;Be10&quot; P = atm_pressure(alt=altitude,model=&quot;stone2000&quot;) # compute atmospheric pressure at site S = scaling_st(P,latitude) # compute the scaling parameters according to Stone (2000) Pspal = prm[1,nuc]*S$Nneutrons # scaled spallation production rate in at/g/y (st scaling) Pstop = prm[2,nuc]*S$Nmuons # scaled stopped muons production rate in at/g/y Pfast = prm[3,nuc]*S$Nmuons # scaled fast muons production rate in at/g/y lambda = prm[4,nuc] # radioactive decay (1/y) t = seq(0,200e3,by=100) # a vector containing time from 0 to 100 ka by 100 a steps C = (Pspal + Pstop + Pfast) / lambda * (1-exp(-lambda*t)) plot(t/1000,C,type=&quot;l&quot;,col=&quot;coral&quot;,lwd=3,ylab=&quot;Concentration (at/g)&quot;,xlab=&quot;Time (ka)&quot;) grid() # check if this is ok C2 = solv_conc_eul(0,0,t,0,prm[,nuc],S,Lambda) # compute concentration for pure exposure lines(t/1000,C2,lty=2) One thing to note in this graph is that time \\(t\\) is expressed as time elapsed since start of exposure, which we can not directly translate into the age BP, when dealing with radioactive decay and time variations in production rate. Change the maximum time t to check that everything is correct. 4.2 Interpretation in terms of exposure ages We are now going to make some simple calculations to interpret concentrations in terms of exposure age. The objective is solving for \\(t\\) the equation \\(C_{mod}(t) = C_{mes}\\). The left hand side is our modelled concentration, obtained for example with equation (??) (solv_conc_eul), where we need to keep in mind all the hypotheses we make (\\(z=0\\), \\(\\varepsilon=0\\), \\(C_0=0\\)). We are going to use an example from Protin et al. (2019), using sample ARG-16-9, which was collected from a lateral moraine of the Argenti√®re glacier (Northern French Alps). Here are the characteristics of this sample (see table 1 from this paper). Code rho = 2.7 altitude = 2252 # elevation in m latitude = 45.97 # latitude in degrees longitude = 6.96 # longitude in degrees Ss = 0.939*exp(-2.6*rho/Lambda[1]) # factor accounting for topographic shielding and sample thickness Cmes = 26.8e4 # measured concentration (at/g) Cmes_e = 1.3e4 # P = atm_pressure(alt=altitude,lat=latitude,lon=longitude,model=&quot;era40&quot;) # compute atmospheric pressure at site S = scaling_st(P,latitude) # compute the scaling parameters according to Stone (2000) Now, for example we can make some guess about the exposure age and see what is the difference with the measured concentration. Code age = 10e3 # a Cmod = solv_conc_eul(0,0,age,0,prm[,&quot;Be10&quot;],S*Ss,Lambda) # compute concentration Below you can get all the necessary code to compute Cmod Code library(&quot;TCNtools&quot;) data(Lambda) data(prm) rho = 2.7 # rho = 2.7 altitude = 2252 # elevation in m latitude = 45.97 # latitude in degrees longitude = 6.96 # longitude in degrees Ss = 0.939*exp(-2.6*rho/Lambda[1]) # factor accounting for topographic shielding and sample thickness Cmes = 26.8e4 # measured concentration (at/g) Cmes_e = 1.3e4 # P = atm_pressure(alt=altitude,lat=latitude,lon=longitude,model=&quot;era40&quot;) # compute atmospheric pressure at site S = scaling_st(P,latitude) # compute the scaling parameters according to Stone (2000) age = 10e3 # a Cmod = solv_conc_eul(0,0,age,0,prm[,&quot;Be10&quot;],S*Ss,Lambda) # compute concentration Change the value of age and try to get close to measured \\(^{10}\\)Be concentration. We could try make Cmod equal to Cmes by trial and error, but we can be more systematic. We go through automatically over a whole range of age values, and compute the corresponding Cmod values. Code age = seq(0,20e3,by=10) # we define a vector for age, which set the different explored values Cmod = rep(NA,length(age)) # The vector of same length to store the results for (i in 1:length(age)){ Cmod[i] = solv_conc_eul(0,0,age[i],0,prm[,&quot;Be10&quot;],S*Ss,Lambda) # compute concentration } We then plot the results to identify the minimum value of \\(|C_{mod} - C_{mes}|\\) Code imin = which.min(abs(Cmod-Cmes)) # what is the index of the minimum difference res = age[imin] # the corresponding age plot(age,abs(Cmod-Cmes),type=&quot;l&quot;, xlab=&quot;Age (a)&quot;, main=paste(res,&quot;a BP&quot;),col=&quot;coral&quot;,lwd=2) abline(h=0) abline(v=res) Below you can get all the necessary code to produce the figure Code library(&quot;TCNtools&quot;) data(Lambda) data(prm) rho = 2.7 # rho = 2.7 altitude = 2252 # elevation in m latitude = 45.97 # latitude in degrees longitude = 6.96 # longitude in degrees Ss = 0.939*exp(-2.6*rho/Lambda[1]) # factor accounting for topographic shielding and sample thickness Cmes = 26.8e4 # measured concentration (at/g) Cmes_e = 1.3e4 # P = atm_pressure(alt=altitude,lat=latitude,lon=longitude,model=&quot;era40&quot;) # compute atmospheric pressure at site S = scaling_st(P,latitude) # compute the scaling parameters according to Stone (2000) age = 10e3 # a Cmod = solv_conc_eul(0,0,age,0,prm[,&quot;Be10&quot;],S*Ss,Lambda) # compute concentration age = seq(0,20e3,by=10) # we define a vector for age, which set the different explored values Cmod = rep(NA,length(age)) # The vector of same length to store the results for (i in 1:length(age)){ Cmod[i] = solv_conc_eul(0,0,age[i],0,prm[,&quot;Be10&quot;],S*Ss,Lambda) # compute concentration } imin = which.min(abs(Cmod-Cmes)) # what is the index of the minimum difference res = age[imin] # the corresponding age plot(age,abs(Cmod-Cmes),type=&quot;l&quot;, xlab=&quot;Age (a)&quot;, main=paste(res,&quot;a BP&quot;),col=&quot;coral&quot;,lwd=2) abline(h=0) abline(v=res) Compare with the age reported in table 1 from Protin et al. (2019). Comment about the possible causes for the differences? We can be even more efficient by using an simple optimization approach to solve \\(C_{mod}(t) = C_{mes}\\), using the built in optimize function. We just define a function to be optimized (search of minimum) and launch a search over an age range. We are looking for the minimum value of \\(|C_{mod}(t)-C_{mes}|\\). Here the function we are trying to optimize. Code fun_opt &lt;-function(t,Cmes,prm,S,Lambda){ Cmod = solv_conc_eul(0,0,t,0,prm[,&quot;Be10&quot;],S,Lambda) return(abs(Cmod-Cmes)) } We then launch the search of the 0-50 ka interval. Code res = optimize(fun_opt,c(0,50e3),Cmes,prm,S*Ss,Lambda) print(res) ## $minimum ## [1] 12478.57 ## ## $objective ## [1] 0.0008513347 Below you can get all the necessary code to obtain this result Code library(&quot;TCNtools&quot;) data(Lambda) data(prm) rho = 2.7 # rho = 2.7 altitude = 2252 # elevation in m latitude = 45.97 # latitude in degrees longitude = 6.96 # longitude in degrees Ss = 0.939*exp(-2.6*rho/Lambda[1]) # factor accounting for topographic shielding and sample thickness Cmes = 26.8e4 # measured concentration (at/g) Cmes_e = 1.3e4 # P = atm_pressure(alt=altitude,lat=latitude,lon=longitude,model=&quot;era40&quot;) # compute atmospheric pressure at site S = scaling_st(P,latitude) # compute the scaling parameters according to Stone (2000) fun_opt &lt;-function(t,Cmes,prm,S,Lambda){ Cmod = solv_conc_eul(0,0,t,0,prm[,&quot;Be10&quot;],S,Lambda) return(abs(Cmod-Cmes)) } res = optimize(fun_opt,c(0,50e3),Cmes,prm,S*Ss,Lambda) print(res) This is a very coarse calculation, but searching the solution for \\(C_{mod}(t)=C_{mes}\\) is the essence of what online calculator do. What kind of improvement could you think of concerning this calculation? 4.3 Time varying production rates We are now going back to the time-varying scaling schemes, such as the one we explored in the previous chapter. Code data = data.frame(t1=seq(0,20e3,length.out=2000)) # we build a dataframe to store results data$t2 = max(data$t1) - data$t1 # time BP data$vdm = get_vdm(data$t2,model=&quot;musch&quot;) data$rc = vdm2rc(data$vdm,latitude,model=&quot;elsasser54&quot;) data$lm = scaling_lm(P,data$rc) plot(data$t2,data$lm,type=&quot;l&quot;,xlab=&quot;Age BP (a)&quot;,ylab=&quot;Scaling factor&quot;) abline(h=S$Nneutrons,col=&quot;red&quot;) abline(h=mean(data$lm),lty=2) In this case we can not use the same equations for the evolution of TCN concentration as above, because we need to account for \\(P(t)\\). We are going to use, \\[C_{mod}(t) = e^{-\\lambda t} \\int_0^t P(t&#39;)e^{\\lambda t&#39;}dt&#39;\\] Important notes : - It is usually considered that production by muons is much less affected than that by neutrons by the magnetic field variations. - You might notice that the equation above is different than, for example, equation 1 from Balco et al. (2008), of the form \\(C_{mod}(T) = \\int_0^T P(t&#39;)e^{-\\lambda t&#39;}dt&#39;\\). This just because the latter refer to exposure age BP, whereas we are thinking in terms of time since exposure here. Below we first compare how the concentration evolves through time with the two approaches. Code library(pracma) # useful library containing the cumtrapz function for trapezoidal integration # Pspal = prm[1,&quot;Be10&quot;]*S$Nneutrons*Ss # scaled spallation production rate in at/g/y (st scaling) Pstop = prm[2,&quot;Be10&quot;]*S$Nmuons*Ss # scaled stopped muons production rate in at/g/y Pfast = prm[3,&quot;Be10&quot;]*S$Nmuons*Ss # scaled fast muons production rate in at/g/y lambda = prm[4,&quot;Be10&quot;] # radioactive decay (1/y) data$Prod_st = Pspal + Pstop + Pfast data$C1 = solv_conc_eul(0,0,data$t1,0,prm,S*Ss,Lambda) # data$Prod_lm = prm[1,&quot;Be10&quot;]*data$lm*Ss+(prm[2,&quot;Be10&quot;] + prm[3,&quot;Be10&quot;])*Ss*S$Nmuons data$C2 = exp(-lambda*data$t1)*cumtrapz(data$t1,data$Prod_lm*exp(lambda*data$t1)) # plot(data$t1,data$C1,type=&quot;l&quot;,xlab=&quot;Time since start of exposure (a)&quot;,ylab=&quot;Concentration (at/g)&quot;,col=&quot;cyan4&quot;) lines(data$t1,data$C2,col=&quot;darkgoldenrod2&quot;) legend(&quot;topleft&quot;,c(&quot;st&quot;,&quot;lm&quot;),lty=1,col=c(&quot;cyan4&quot;, &quot;darkgoldenrod2&quot;)) Comment on the differences. We can solve solve \\(C_{mod}(t)=C_{mes}\\) for \\(t\\) with the same approach as the st case, Code library(pracma) # useful library containing the cumtrapz function for trapezoidal integration # compute_C&lt;-function(t1,prm,P,lat,Lambda,S,Ss){ data = data.frame(t1=seq(0,t1,length.out=1000)) # we build a dataframe to store results data$t2 = max(data$t1) - data$t1 # time BP data$vdm = get_vdm(data$t2,model=&quot;musch&quot;) data$rc = vdm2rc(data$vdm,lat,model=&quot;elsasser54&quot;) data$lm = scaling_lm(P,data$rc)*Ss Cmod = exp(-prm[&quot;lambda&quot;,&#39;Be10&#39;]*data$t1[nrow(data)])*trapz(data$t1,(prm[1,&quot;Be10&quot;]*data$lm+(prm[2,&quot;Be10&quot;] + prm[3,&quot;Be10&quot;])*S$Nmuons)*(exp(prm[&quot;lambda&quot;,&#39;Be10&#39;]*data$t1))) return(Cmod) } # fun_opt2 &lt;-function(t1,Cmes,prm,P,lat,Lambda,S,Ss){ Cmod = compute_C(t1,prm,P,lat,Lambda,S,Ss) return(abs(Cmod-Cmes)) } # P = atm_pressure(alt=altitude,lat=latitude,lon=longitude,model=&quot;era40&quot;) # compute atmospheric pressure at site S = scaling_st(P,latitude) # compute the scaling parameters according to Stone (2000) res = optimize(fun_opt2,c(0,50e3),Cmes,prm,P,latitude,Lambda,S,Ss) print(res) ## $minimum ## [1] 12562.66 ## ## $objective ## [1] 0.001908477 Below you can get all the necessary code to obtain this result Code library(&quot;TCNtools&quot;) data(Lambda) data(prm) rho = 2.7 # rho = 2.7 altitude = 2252 # elevation in m latitude = 45.97 # latitude in degrees longitude = 6.96 # longitude in degrees Ss = 0.939*exp(-2.6*rho/Lambda[1]) # factor accounting for topographic shielding and sample thickness Cmes = 26.8e4 # measured concentration (at/g) Cmes_e = 1.3e4 # P = atm_pressure(alt=altitude,lat=latitude,lon=longitude,model=&quot;era40&quot;) # compute atmospheric pressure at site S = scaling_st(P,latitude) # compute the scaling parameters according to Stone (2000) library(pracma) # useful library containing the cumtrapz function for trapezoidal integration # compute_C&lt;-function(t1,prm,P,lat,Lambda,S,Ss){ data = data.frame(t1=seq(0,t1,length.out=1000)) # we build a dataframe to store results data$t2 = max(data$t1) - data$t1 # time BP data$vdm = get_vdm(data$t2,model=&quot;musch&quot;) data$rc = vdm2rc(data$vdm,lat,model=&quot;elsasser54&quot;) data$lm = scaling_lm(P,data$rc)*Ss Cmod = exp(-prm[&quot;lambda&quot;,&#39;Be10&#39;]*data$t1[nrow(data)])*trapz(data$t1,(prm[1,&quot;Be10&quot;]*data$lm+(prm[2,&quot;Be10&quot;] + prm[3,&quot;Be10&quot;])*S$Nmuons)*(exp(prm[&quot;lambda&quot;,&#39;Be10&#39;]*data$t1))) return(Cmod) } # fun_opt2 &lt;-function(t1,Cmes,prm,P,lat,Lambda,S,Ss){ Cmod = compute_C(t1,prm,P,lat,Lambda,S,Ss) return(abs(Cmod-Cmes)) } # P = atm_pressure(alt=altitude,lat=latitude,lon=longitude,model=&quot;era40&quot;) # compute atmospheric pressure at site S = scaling_st(P,latitude) # compute the scaling parameters according to Stone (2000) res = optimize(fun_opt2,c(0,50e3),Cmes,prm,P,latitude,Lambda,S,Ss) print(res) Caveat we did those calculation using a number of simplification and numerical shortcuts ‚Ä¶. 4.4 Dealing with uncertainties "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
